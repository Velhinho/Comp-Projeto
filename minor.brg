%{
/*
 * selecção de instruções com postfix
 */
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "postfix.h"
#include "y.tab.h"
#include "minor.h"

#ifndef U_
#define U_ "_"
#endif

#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);

extern FILE *yyout;
static char *mklbl(int n) {
	static char buf[20];
	sprintf(buf, "%cL%d", n < 0 ? '.' : '_', n);
	return strcpy(malloc(strlen(buf)+1),buf);
}
static char *mkfunc(char *s) {
	static char buf[80];
	strcpy(buf, "_");
	strcat(buf, s);
	return buf;
}
%}

%term STMT=';' BANG='!'
%include "y.tab.h"

%%
file: PROGRAM(decls, FUNCTION(END(ID, INT), FARGS(NIL, main)))  1 {}
file: MODULE(decls)  1 {}

decls: NIL  1 {}
decls: gdecls  1 {}

gdecls: DECL(gdecls, decl)  1 {}
gdecls: DECL(NIL, decl)  1 {}

decl: NIL  1 {}

chars: CHARS(NIL, char)  1 {}
chars: CHARS(chars, char)  1 {}

char: CHAR  1 {}
char: STR  1 {}

main: START(NIL, instrs)  1 {}

instrs: NIL  1 {}
instrs: STMT(instrs, instr)  1 {}

instr: BANG(expr)  1 {}

expr: chars  1 {}

%%

extern char **yynames;
extern int trace, errors, debugNode;
void evaluate(Node *p) {
	if (errors) return;
	/* if (trace) */ printNode(p, stdout, yynames);
	if (!yyselect(p) && trace) printf("selection successful\n");
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
	int op = OP_LABEL(p);
	YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
	if (debugNode) fprintf(stderr, "0x%p:%s matched %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
	if (cost >= MAX_COST && bestcost >= MAX_COST) {
		fprintf(stderr, "0x%p:%s NO MATCH %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
		printNode(p, stderr, yynames);
	}
}
#endif
